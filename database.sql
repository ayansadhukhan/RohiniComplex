-- MySQL Script generated by MySQL Workbench
-- 02/10/17 11:12:04
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema rohinicomplex
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `rohinicomplex` ;

-- -----------------------------------------------------
-- Schema rohinicomplex
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `rohinicomplex` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `rohinicomplex` ;

-- -----------------------------------------------------
-- Table `rohinicomplex`.`GARRIAGETYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`GARRIAGETYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`GARRIAGETYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`BILLTYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`BILLTYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`BILLTYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`ASSETTYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`ASSETTYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`ASSETTYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`WRITEOFFREASONTYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`WRITEOFFREASONTYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`WRITEOFFREASONTYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`USERDOCUMENTTYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`USERDOCUMENTTYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`USERDOCUMENTTYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`VIDETYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`VIDETYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`VIDETYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`TRANSACTIONTYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`TRANSACTIONTYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`TRANSACTIONTYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`CATEGORYTYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`CATEGORYTYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`CATEGORYTYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`PERCENTAGETYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`PERCENTAGETYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`PERCENTAGETYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`ROLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`ROLE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`ROLE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DISPLAY_NAME` VARCHAR(50) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  `CONTRL` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `NAME_UNIQUE` (`NAME` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`PERMISSION`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`PERMISSION` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`PERMISSION` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DISPLAY_NAME` VARCHAR(50) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `NAME_UNIQUE` (`NAME` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`ROLEXPERMISSION`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`ROLEXPERMISSION` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`ROLEXPERMISSION` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `ROLE` INT NULL,
  `PERMISSION` INT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `RXPROLE`
    FOREIGN KEY (`ROLE`)
    REFERENCES `rohinicomplex`.`ROLE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `RXPPERMISSION`
    FOREIGN KEY (`PERMISSION`)
    REFERENCES `rohinicomplex`.`PERMISSION` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`USER`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`USER` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`USER` (
  `ID` INT NOT NULL,
  `FNAME` VARCHAR(20) NOT NULL,
  `MNAME` VARCHAR(20) NULL,
  `LNAME` VARCHAR(20) NOT NULL,
  `SEX` CHAR(1) NOT NULL,
  `DOB` DATE NULL,
  `ADDRESS` VARCHAR(200) NULL,
  `PIN` CHAR(6) NULL,
  `MOBILENUMBER` CHAR(10) NULL,
  `PHONE` VARCHAR(15) NULL,
  `EMAIL` VARCHAR(45) NULL,
  `RETIRED` TINYINT(1) NOT NULL,
  `IMAGE` BLOB NULL,
  `VERIFIED` TINYINT(1) NOT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`CREDENTIALS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`CREDENTIALS` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`CREDENTIALS` (
  `ID` INT NOT NULL,
  `USERNAME` VARCHAR(45) NOT NULL,
  `PASSWORD` VARCHAR(100) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  `RETRYCOUNT` INT NOT NULL,
  `LOCKED` TINYINT(1) NOT NULL DEFAULT 0,
  `USERID` INT NOT NULL,
  `USERIDMODI` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  INDEX `USERID_idx` (`USERID` ASC),
  CONSTRAINT `CREDUSERID`
    FOREIGN KEY (`USERID`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`USERXROLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`USERXROLE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`USERXROLE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `ROLE` INT NULL,
  `USER` INT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `UXRROLE`
    FOREIGN KEY (`ROLE`)
    REFERENCES `rohinicomplex`.`ROLE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `UXRUSER`
    FOREIGN KEY (`USER`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`USERVERIDOC`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`USERVERIDOC` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`USERVERIDOC` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `USERID` INT NOT NULL,
  `USERDOCUMENTTYPE` INT NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `DCOUMENT` BLOB NULL,
  `UPLOADED` TINYINT(1) NOT NULL DEFAULT 0,
  `VERIFIED` TINYINT(1) NOT NULL DEFAULT 0,
  `UPLOADEDBY` INT NULL,
  `UPLOADTIME` DATETIME NULL,
  `VERFIEDBY` INT NULL,
  `VERIFIEDON` DATETIME NULL,
  PRIMARY KEY (`ID`),
  INDEX `USERID_idx` (`USERID` ASC),
  INDEX `VERIFIEDBY_idx` (`VERFIEDBY` ASC),
  INDEX `UPLOADEDBY_idx` (`UPLOADEDBY` ASC),
  INDEX `DOCUMENTTYPE_idx` (`USERDOCUMENTTYPE` ASC),
  CONSTRAINT `DOCUSERID`
    FOREIGN KEY (`USERID`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `DOCUPLOADEDBY`
    FOREIGN KEY (`UPLOADEDBY`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `DOCVERIFIEDBY`
    FOREIGN KEY (`VERFIEDBY`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `DOCUMENTTYPEID`
    FOREIGN KEY (`USERDOCUMENTTYPE`)
    REFERENCES `rohinicomplex`.`USERDOCUMENTTYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`FLATDETAIL`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`FLATDETAIL` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`FLATDETAIL` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `BLOCK` CHAR(1) NOT NULL,
  `FLATNUMBER` CHAR(3) NOT NULL,
  `SQFT` INT NOT NULL,
  `FLOOR` CHAR(1) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`GARRIAGEDETAIL`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`GARRIAGEDETAIL` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`GARRIAGEDETAIL` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `GARRIAGENUMBER` VARCHAR(5) NOT NULL,
  `GARRIAGETYPEID` INT NULL,
  `SQFT` INT NULL,
  PRIMARY KEY (`ID`),
  INDEX `GARRIAGETYPEID_idx` (`GARRIAGETYPEID` ASC),
  CONSTRAINT `FK_GARRIAGETYPEID`
    FOREIGN KEY (`GARRIAGETYPEID`)
    REFERENCES `rohinicomplex`.`GARRIAGETYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`ASSET`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`ASSET` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`ASSET` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `GARRIAGEID` INT NULL,
  `FLATID` INT NULL,
  `ASSETTYPEID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `GARRIAGEID_idx` (`GARRIAGEID` ASC),
  INDEX `FLATID_idx` (`FLATID` ASC),
  INDEX `ASSETTYPEID_idx` (`ASSETTYPEID` ASC),
  CONSTRAINT `ASSTGARRIAGEID`
    FOREIGN KEY (`GARRIAGEID`)
    REFERENCES `rohinicomplex`.`GARRIAGEDETAIL` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ASSTFLATID`
    FOREIGN KEY (`FLATID`)
    REFERENCES `rohinicomplex`.`FLATDETAIL` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ASSTASSETTYPEID`
    FOREIGN KEY (`ASSETTYPEID`)
    REFERENCES `rohinicomplex`.`ASSETTYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`ASSETRELATIONTYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`ASSETRELATIONTYPE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`ASSETRELATIONTYPE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(20) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NULL,
  `CODE` VARCHAR(20) NOT NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`RESIDENTASSETMAPPING`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`RESIDENTASSETMAPPING` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`RESIDENTASSETMAPPING` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `USERID` INT NOT NULL,
  `ASSETID` INT NULL,
  `STARTDATE` DATE NOT NULL,
  `ENDDATE` DATE NULL,
  `RELATIONTYPEID` INT NULL,
  PRIMARY KEY (`ID`),
  INDEX `USERID_idx` (`USERID` ASC),
  INDEX `ASSETID_idx` (`ASSETID` ASC),
  INDEX `RESRELTYPE_idx` (`RELATIONTYPEID` ASC),
  CONSTRAINT `RESUSERID`
    FOREIGN KEY (`USERID`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `RESASSETID`
    FOREIGN KEY (`ASSETID`)
    REFERENCES `rohinicomplex`.`ASSET` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `RESRELTYPE`
    FOREIGN KEY (`RELATIONTYPEID`)
    REFERENCES `rohinicomplex`.`ASSETRELATIONTYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`FACILITYDETAIL`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`FACILITYDETAIL` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`FACILITYDETAIL` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NAME` VARCHAR(5) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NOT NULL,
  `BILLTYPEID` INT NOT NULL,
  `BILLFREQUENCY` INT NULL,
  PRIMARY KEY (`ID`),
  INDEX `BILLTYPEID_idx` (`BILLTYPEID` ASC),
  CONSTRAINT `FACILITYBILLTYPEID`
    FOREIGN KEY (`BILLTYPEID`)
    REFERENCES `rohinicomplex`.`BILLTYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`FACILITYMAPPING`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`FACILITYMAPPING` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`FACILITYMAPPING` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `USERID` INT NOT NULL,
  `FACILITYID` INT NOT NULL,
  `STARTDATE` DATE NOT NULL,
  `ENDDATE` DATE NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `STARTDATE_UNIQUE` (`STARTDATE` ASC),
  INDEX `FACILITYID_idx` (`FACILITYID` ASC),
  INDEX `USERID_idx` (`USERID` ASC),
  CONSTRAINT `FMAPFACILITYID`
    FOREIGN KEY (`FACILITYID`)
    REFERENCES `rohinicomplex`.`FACILITYDETAIL` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FMAPUSERID`
    FOREIGN KEY (`USERID`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`PAYMENT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`PAYMENT` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`PAYMENT` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `DATE` DATE NOT NULL,
  `VIDETYPEID` INT NOT NULL,
  `AMOUNT` DECIMAL NOT NULL,
  `USERID` INT NOT NULL,
  `RECEIVEDBY` INT NOT NULL,
  `REVERSED` TINYINT(1) NOT NULL DEFAULT 0,
  `REFNO` VARCHAR(20) NULL,
  PRIMARY KEY (`ID`),
  INDEX `VIDETYPEID_idx` (`VIDETYPEID` ASC),
  INDEX `USERID_idx` (`USERID` ASC),
  INDEX `RECEIVEDBY_idx` (`RECEIVEDBY` ASC),
  CONSTRAINT `PAYVIDETYPEID`
    FOREIGN KEY (`VIDETYPEID`)
    REFERENCES `rohinicomplex`.`VIDETYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `PAYUSERID`
    FOREIGN KEY (`USERID`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `PAYRECEIVEDBY`
    FOREIGN KEY (`RECEIVEDBY`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`EXPENDATURE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`EXPENDATURE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`EXPENDATURE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `DATE` DATE NOT NULL,
  `VIDETYPEID` INT NOT NULL,
  `CATEGORYTYPEID` INT NOT NULL,
  `AMOUNT` DECIMAL NOT NULL,
  `REFERENCE` VARCHAR(5) NULL,
  `PAYTO` VARCHAR(200) NOT NULL,
  `PAIDBY` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `VIDETYPEID_idx` (`VIDETYPEID` ASC),
  INDEX `CATEGORYTYPEID_idx` (`CATEGORYTYPEID` ASC),
  INDEX `PAIDBY_idx` (`PAIDBY` ASC),
  CONSTRAINT `EXVIDETYPEID`
    FOREIGN KEY (`VIDETYPEID`)
    REFERENCES `rohinicomplex`.`VIDETYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `EXCATEGORYTYPEID`
    FOREIGN KEY (`CATEGORYTYPEID`)
    REFERENCES `rohinicomplex`.`CATEGORYTYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `EXPAIDBY`
    FOREIGN KEY (`PAIDBY`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`CHARGEPATTERNDETAIL`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`CHARGEPATTERNDETAIL` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`CHARGEPATTERNDETAIL` (
  `ID` INT NOT NULL,
  `STARTDATE` DATE NOT NULL,
  `ENDDATE` DATE NULL,
  `PERCENTAGE` DECIMAL NULL,
  `FIXEDAMOUNT` DECIMAL NULL,
  `RETIRED` TINYINT(1) NOT NULL DEFAULT 0,
  `PERCENTAGEOF` INT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`CHARGEPATTERN`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`CHARGEPATTERN` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`CHARGEPATTERN` (
  `ID` INT NOT NULL,
  `NAME` VARCHAR(50) NOT NULL,
  `DESCRIPTION` VARCHAR(50) NULL,
  `PATTERNDETAIL` INT NOT NULL,
  `PERIODICITY` INT NOT NULL,
  `CATEGORYTYPEID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `CATEGORYTYPEID_idx` (`CATEGORYTYPEID` ASC),
  INDEX `CHARGEPATTERNDETAIL_idx` (`PATTERNDETAIL` ASC),
  CONSTRAINT `CPCATEGORYTYPEID`
    FOREIGN KEY (`CATEGORYTYPEID`)
    REFERENCES `rohinicomplex`.`CATEGORYTYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `CPCHARGEPATTERNDETAIL`
    FOREIGN KEY (`PATTERNDETAIL`)
    REFERENCES `rohinicomplex`.`CHARGEPATTERNDETAIL` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`CHARGE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`CHARGE` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`CHARGE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `HOLD` TINYINT(1) NOT NULL DEFAULT 0,
  `AMOUNT` DECIMAL NULL,
  `ASSETID` INT NULL,
  `REVERSED` TINYINT(1) NOT NULL DEFAULT 0,
  `EVENTDATE` DATE NOT NULL,
  `DUEDATE` DATE NOT NULL,
  `CREATEDBY` INT NOT NULL,
  `FACILITYID` INT NULL,
  `CHARGEPATTERN` INT NOT NULL,
  `HOLDREASON` VARCHAR(50) NULL,
  PRIMARY KEY (`ID`),
  INDEX `CHARGEPATTERN_idx` (`CHARGEPATTERN` ASC),
  INDEX `CREATEDBY_idx` (`CREATEDBY` ASC),
  INDEX `ASSETID_idx` (`ASSETID` ASC),
  INDEX `FACILITYID_idx` (`FACILITYID` ASC),
  CONSTRAINT `CGCHARGEPATTERN`
    FOREIGN KEY (`CHARGEPATTERN`)
    REFERENCES `rohinicomplex`.`CHARGEPATTERN` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `CGCREATEDBY`
    FOREIGN KEY (`CREATEDBY`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `CGASSETID`
    FOREIGN KEY (`ASSETID`)
    REFERENCES `rohinicomplex`.`ASSET` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `CGFACILITYID`
    FOREIGN KEY (`FACILITYID`)
    REFERENCES `rohinicomplex`.`FACILITYDETAIL` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`PAYMENTITEM`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`PAYMENTITEM` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`PAYMENTITEM` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `PAYMENTID` INT NOT NULL,
  `AMOUNT` DECIMAL NOT NULL,
  `CHARGEID` INT NOT NULL,
  `REVERSED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  INDEX `PAYMENTID_idx` (`PAYMENTID` ASC),
  INDEX `CHARGEID_idx` (`CHARGEID` ASC),
  CONSTRAINT `PIPAYMENTID`
    FOREIGN KEY (`PAYMENTID`)
    REFERENCES `rohinicomplex`.`PAYMENT` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `PICHARGEID`
    FOREIGN KEY (`CHARGEID`)
    REFERENCES `rohinicomplex`.`CHARGE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`WRITEOFF`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`WRITEOFF` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`WRITEOFF` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `DATE` DATE NOT NULL,
  `AMOUNT` DECIMAL NOT NULL,
  `USERID` INT NOT NULL,
  `RECEIVEDBY` INT NOT NULL,
  `REVERSED` TINYINT(1) NOT NULL DEFAULT 0,
  `REASON` INT NULL,
  PRIMARY KEY (`ID`),
  INDEX `USERID_idx` (`USERID` ASC),
  INDEX `RECEIVEDBY_idx` (`RECEIVEDBY` ASC),
  INDEX `REASON_idx` (`REASON` ASC),
  CONSTRAINT `WOUSERID`
    FOREIGN KEY (`USERID`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `WORECEIVEDBY`
    FOREIGN KEY (`RECEIVEDBY`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `WOREASON`
    FOREIGN KEY (`REASON`)
    REFERENCES `rohinicomplex`.`WRITEOFFREASONTYPE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`WRITEOFFITEM`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`WRITEOFFITEM` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`WRITEOFFITEM` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `WRITEOFFID` INT NOT NULL,
  `AMOUNT` DECIMAL NOT NULL,
  `CHARGEID` INT NOT NULL,
  `REVERSED` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  INDEX `WRITEOFFID_idx` (`WRITEOFFID` ASC),
  INDEX `CHARGEID_idx` (`CHARGEID` ASC),
  CONSTRAINT `WIWRITEOFFID`
    FOREIGN KEY (`WRITEOFFID`)
    REFERENCES `rohinicomplex`.`WRITEOFF` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `WICHARGEID`
    FOREIGN KEY (`CHARGEID`)
    REFERENCES `rohinicomplex`.`CHARGE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rohinicomplex`.`BILL`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rohinicomplex`.`BILL` ;

CREATE TABLE IF NOT EXISTS `rohinicomplex`.`BILL` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `PAYMENTID` INT NULL,
  `BILLEDTO` INT NOT NULL,
  `BILLDATE` DATE NOT NULL,
  `WRITEOFFID` INT NULL,
  `BILLNUMBER` VARCHAR(5) NOT NULL,
  `GENERATEDBY` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `PAYMENTID_idx` (`PAYMENTID` ASC),
  INDEX `WRITEOFFID_idx` (`WRITEOFFID` ASC),
  INDEX `GENERATEDBY_idx` (`GENERATEDBY` ASC),
  INDEX `BILLEDTO_idx` (`BILLEDTO` ASC),
  CONSTRAINT `BILLPAYMENTID`
    FOREIGN KEY (`PAYMENTID`)
    REFERENCES `rohinicomplex`.`PAYMENT` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `BILLWRITEOFFID`
    FOREIGN KEY (`WRITEOFFID`)
    REFERENCES `rohinicomplex`.`WRITEOFF` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `BILLGENERATEDBY`
    FOREIGN KEY (`GENERATEDBY`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `BILLBILLEDTO`
    FOREIGN KEY (`BILLEDTO`)
    REFERENCES `rohinicomplex`.`USER` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `rohinicomplex` ;

-- -----------------------------------------------------
-- Placeholder table for view `rohinicomplex`.`PROFILEVIEW`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rohinicomplex`.`PROFILEVIEW` (`USERNAME` INT, `FNAME` INT, `MNAME` INT, `LNAME` INT, `sex` INT, `DOB` INT, `ADDRESS` INT, `PIN` INT, `EMAIL` INT, `MOBILENUMBER` INT, `PHONE` INT, `LOCKED` INT, `USERIDMODI` INT, `IMAGE` INT, `VERIFIED` INT, `USERID` INT, `ROLES` INT, `ROLEIDS` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rohinicomplex`.`PERMISSIONXUSERVIEW`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rohinicomplex`.`PERMISSIONXUSERVIEW` (`PERMISSIONS` INT, `USERNAME` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rohinicomplex`.`ASSETVIEW`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rohinicomplex`.`ASSETVIEW` (`ASSETTYPE` INT, `STARTDATE` INT, `ENDDATE` INT, `USERNAME` INT, `ASSETNAME` INT, `ID` INT, `RELATIONCODE` INT, `RELATIONID` INT, `USERID` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rohinicomplex`.`PAYMENTSVIEW`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rohinicomplex`.`PAYMENTSVIEW` (`EBILLNO` INT, `BILLNUMBER` INT, `BILLDATE` INT, `PAYMENTDATE` INT, `REFNO` INT, `VIDE` INT, `AMOUNT` INT, `USERNAME` INT, `TREASURER` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rohinicomplex`.`PAYMENTDETAILVIEW`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rohinicomplex`.`PAYMENTDETAILVIEW` (`ID` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rohinicomplex`.`CHARGEVIEW`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rohinicomplex`.`CHARGEVIEW` (`SLNO` INT, `INVDATE` INT, `DUEDATE` INT, `AMOUNT` INT, `USERID` INT, `PAID` INT, `WF` INT, `DUEAMOUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rohinicomplex`.`GETMRMBERSVIEW`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rohinicomplex`.`GETMRMBERSVIEW` (`id` INT, `Name` INT, `Role` INT, `Asset` INT, `PHONE` INT, `EMAIL` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rohinicomplex`.`ALLASSTVIEW`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rohinicomplex`.`ALLASSTVIEW` (`ID` INT, `ASSETTYPE` INT, `ASSET` INT);

-- -----------------------------------------------------
-- procedure ADDPAYMENT
-- -----------------------------------------------------

USE `rohinicomplex`;
DROP procedure IF EXISTS `rohinicomplex`.`ADDPAYMENT`;

DELIMITER $$
USE `rohinicomplex`$$
CREATE PROCEDURE `ADDPAYMENT` (
IN BILLTO INT, 
IN VIDE INT, 
IN REF VARCHAR(20),
IN AMOUNT DOUBLE,
IN PAYDATE DATE,
IN RECEVIDEDBYUN VARCHAR(45),
IN PAYIDETAIL VARCHAR(500),
IN WFIDETAIL VARCHAR(500),
IN BILLNO VARCHAR(5),
IN WFAMOUNT DOUBLE,
OUT RETURNVALUE INT
)
BEGIN


DECLARE paymentid INT DEFAULT null;
DECLARE writeoffid INT DEFAULT null;
DECLARE ebillid INT DEFAULT 0;
DECLARE chargecount INT DEFAULT 0;
DECLARE loopcount INT DEFAULT 0;
DECLARE payitemdtl varchar(10);
DECLARE wfitemdtl varchar(10);
DECLARE RECEVIDEDBY INT DEFAULT null;
DECLARE exit handler for sqlexception
  BEGIN
    -- ERROR
    set RETURNVALUE = -1;
  ROLLBACK;
END;
  
DECLARE exit handler for sqlwarning
 BEGIN
    -- WARNING
    set RETURNVALUE = -2;
 ROLLBACK;
END;


START TRANSACTION;

set WFAMOUNT = ifnull(WFAMOUNT,0);
set AMOUNT = ifnull(AMOUNT,0);

SELECT USERID FROM credentials WHERE USERNAME = RECEVIDEDBYUN INTO RECEVIDEDBY;


IF AMOUNT > 0 THEN

INSERT INTO PAYMENT ( `DATE`, `VIDETYPEID`, `AMOUNT`, `USERID`, `RECEIVEDBY`, `REVERSED`, `REFNO`)
 VALUES ( PAYDATE,VIDE, AMOUNT, BILLTO, RECEVIDEDBY, false, REF);

select LAST_INSERT_ID() into paymentid ;





-- Split string

SELECT LENGTH(PAYIDETAIL) - LENGTH(REPLACE(PAYIDETAIL, ',', '')) into chargecount;
set loopcount = 0;

payiloop : LOOP
	set loopcount = loopcount + 1;
	set payitemdtl =  SPLIT_STR(PAYIDETAIL, ',', loopcount);
    
IF (loopcount <=     chargecount) then
    
INSERT INTO `PAYMENTITEM` ( `PAYMENTID`, `AMOUNT`, `CHARGEID`, `REVERSED`)
 VALUES ( paymentid, cast(SPLIT_STR(payitemdtl,':',2) as DECIMAL), cast(SPLIT_STR(payitemdtl,':',1) as UNSIGNED INTEGER), false);
 
 iterate payiloop;
 end if;
leave payiloop;
end loop payiloop;

END IF;

IF WFAMOUNT > 0 THEN

INSERT INTO `WRITEOFF` ( `DATE`, `AMOUNT`, `USERID`, `RECEIVEDBY`, `REVERSED`, `REASON`) 
VALUES (PAYDATE, WFAMOUNT,BILLTO,RECEVIDEDBY,  false, 1);

select LAST_INSERT_ID() into writeoffid ;



set loopcount = 0;
SELECT LENGTH(WFIDETAIL) - LENGTH(REPLACE(WFIDETAIL, ',', '')) into chargecount;
wiloop : LOOP
	set loopcount = loopcount + 1;
	set wfitemdtl =  SPLIT_STR(WFIDETAIL, ',', loopcount);
    
IF (loopcount <=     chargecount) then
    
 INSERT INTO `WRITEOFFITEM` ( `WRITEOFFID`, `AMOUNT`, `CHARGEID`, `REVERSED`) VALUES 
 (writeoffid, cast(SPLIT_STR(wfitemdtl,':',2) as DECIMAL), cast(SPLIT_STR(wfitemdtl,':',1) as UNSIGNED INTEGER), false);
iterate wiloop;
 end if;
leave wiloop;
end loop wiloop;

END IF;


INSERT INTO `BILL` (  `PAYMENTID`, `BILLEDTO`, `BILLDATE`, `WRITEOFFID`, `BILLNUMBER`, `GENERATEDBY`) 
VALUES (PAYMENTID,BILLTO,paydate,writeoffid,BILLNO,RECEVIDEDBY);

select LAST_INSERT_ID() into ebillid ;

commit;
set RETURNVALUE = 1;
END 
$$

DELIMITER ;

-- -----------------------------------------------------
-- function SPLIT_STR
-- -----------------------------------------------------

USE `rohinicomplex`;
DROP function IF EXISTS `rohinicomplex`.`SPLIT_STR`;

DELIMITER $$
USE `rohinicomplex`$$
CREATE FUNCTION `SPLIT_STR`(
  x VARCHAR(255),
  delim VARCHAR(12),
  pos INT
) RETURNS varchar(255) CHARSET utf8
RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),
    LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),
    delim, '')$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ADDORUPDATEMEMBER
-- -----------------------------------------------------

USE `rohinicomplex`;
DROP procedure IF EXISTS `rohinicomplex`.`ADDORUPDATEMEMBER`;

DELIMITER $$
USE `rohinicomplex`$$
CREATE PROCEDURE `ADDORUPDATEMEMBER` (
IN ID INT,
IN USERID VARCHAR(45),
IN FNAME VARCHAR(20),
IN MNAME VARCHAR(20),
IN LNAME VARCHAR(20),
IN SEX CHAR(1),
IN DOB DATE,
IN ADDRESS VARCHAR(200),
IN PIN CHAR(6),
IN EMAIL VARCHAR(45),
IN PHONE VARCHAR(15),
IN MOBILE VARCHAR(15),
IN ROLES VARCHAR(100),
IN ASSETDETAILS VARCHAR(500),
OUT RESULT INT
)
BEGIN
DECLARE ROLECOUNT INT;
DECLARE NEWUSERID INT;
DECLARE LOOPVAR INT;
DECLARE ASSETCOUNT INT;
DECLARE RESIDENTDTL INT;

SELECT LENGTH(ROLES) - LENGTH(REPLACE(ROLES, ',', '')) into ROLECOUNT;

IF ID=0 THEN
INSERT INTO USER (`FNAME`, `MNAME`, `LNAME`, `SEX`, `DOB`, `ADDRESS`, `PIN`, `MOBILENUMBER`, `PHONE`, `EMAIL`, `RETIRED`, `IMAGE`, `VERIFIED`) VALUES (FNAME, MNAME, LNAME, SEX, DOB,ADDRESS, PIN, MOBILE, PHONE,EMAIL, 0, NULL, 0);
select LAST_INSERT_ID() into NEWUSERID ;

ELSE 

SET NEWUSERID =ID ;

UPDATE USER SET FNAME=FNAME,LNAME=LNAME,MNAME=MNAME,SEX=SEX,DOB=DOB,ADRESS = ADDRESS, PIN=PIN, MOBILENUMBER=MOBILE,PHONE=PHONE,EMAIL=EMAIL WHERE ID=NEWUSERID;

END IF;

DELETE FROM USERXROLE WHERE USER = NEWUSERID;
SET LOOPVAR =0;
WHILE LOOPVAR < ROLECOUNT DO
SET LOOPVAR = LOOPVAR + 1;

INSERT INTO USERXROLE ( `ROLE`, `USER`) VALUES ( cast(SPLIT_STR(ROLES,',',LOOPVAR) as UNSIGNED INTEGER), NEWUSERID);

END WHILE;


SELECT LENGTH(ASSETDETAILS) - LENGTH(REPLACE(ASSETDETAILS, ',', '')) into ASSETCOUNT;
DELETE FROM RESIDENTASSETMAPPING WHERE USERID = NEWUSERID;
SET LOOPVAR =0;

WHILE LOOPVAR < ROLECOUNT DO
SET LOOPVAR = LOOPVAR + 1;
SET RESIDENTDTL = SPLIT_STR(ASSETDETAILS,',',LOOPVAR);

INSERT INTO RESIDENTASSETMAPPING (`USERID`, `ASSETID`, `STARTDATE`, `ENDDATE`, `RELATIONTYPEID`) 
VALUES (NEWUSERID, cast(SPLIT_STR(RESIDENTDTL,':',1) as UNSIGNED INTEGER), cast(SPLIT_STR(RESIDENTDTL,':',2) as DATE),  NULL, cast(SPLIT_STR(RESIDENTDTL,':',3) as UNSIGNED INTEGER));
END WHILE;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- View `rohinicomplex`.`PROFILEVIEW`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `rohinicomplex`.`PROFILEVIEW` ;
DROP TABLE IF EXISTS `rohinicomplex`.`PROFILEVIEW`;
USE `rohinicomplex`;
CREATE OR replace VIEW `PROFILEVIEW` AS
select 
USERNAME,
FNAME,
MNAME,
LNAME,
sex,
DOB,
ADDRESS,
PIN,
EMAIL,
MOBILENUMBER,
PHONE,
LOCKED,
USERIDMODI,
IMAGE,
VERIFIED,
user.id as USERID,
GROUP_CONCAT(role.name SEPARATOR ', ') as ROLES,
GROUP_CONCAT(role.id SEPARATOR ',') as ROLEIDS

 from user join credentials on user.id = credentials.USERID
 join userxrole on userxrole.USER = user.id join role on userxrole.ROLE = role.id
where user.RETIRED=0 and credentials.RETIRED=0;

-- -----------------------------------------------------
-- View `rohinicomplex`.`PERMISSIONXUSERVIEW`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `rohinicomplex`.`PERMISSIONXUSERVIEW` ;
DROP TABLE IF EXISTS `rohinicomplex`.`PERMISSIONXUSERVIEW`;
USE `rohinicomplex`;
CREATE OR REPLACE VIEW `PERMISSIONXUSERVIEW` AS
SELECT permission.NAME AS PERMISSIONS,
credentials.username AS USERNAME

FROM 
user JOIN userxrole ON USER.ID = userxrole.USER 
JOIN credentials ON credentials.USERID = user.id
JOIN role ON role.ID = userxrole.ROLE
JOIN rolexpermission ON ROLE.ID = rolexpermission.ROLE
JOIN permission ON rolexpermission.permission = permission.ID
;

-- -----------------------------------------------------
-- View `rohinicomplex`.`ASSETVIEW`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `rohinicomplex`.`ASSETVIEW` ;
DROP TABLE IF EXISTS `rohinicomplex`.`ASSETVIEW`;
USE `rohinicomplex`;
CREATE OR REPLACE VIEW `ASSETVIEW` AS

select 
assettype.NAME as ASSETTYPE,
residentassetmapping.STARTDATE AS STARTDATE,
residentassetmapping.ENDDATE AS ENDDATE,
credentials.USERNAME as USERNAME,
garriagedetail.GARRIAGENUMBER as ASSETNAME,
asset.id as ID,
ASSETRELATIONTYPE.CODE AS RELATIONCODE,
ASSETRELATIONTYPE.id AS RELATIONID,

user.id as USERID
from
asset join assettype on asset.ASSETTYPEID = assettype.ID
join residentassetmapping on residentassetmapping.ASSETID = asset.id
join user on user.id = residentassetmapping.USERID 
join credentials on user.id = credentials.USERID
join garriagedetail on garriagedetail.ID = asset.GARRIAGEID
JOIN ASSETRELATIONTYPE ON ASSETRELATIONTYPE.ID = residentassetmapping.RELATIONTYPEID
union 

select 
assettype.NAME as ASSETTYPE,
residentassetmapping.STARTDATE AS STARTDATE,
residentassetmapping.ENDDATE AS ENDDATE,
credentials.USERNAME as USERNAME,
flatdetail.DESCRIPTION as ASSETNAME,
asset.id as ID,
ASSETRELATIONTYPE.CODE AS RELATIONCODE,
ASSETRELATIONTYPE.id AS RELATIONID,
user.id as USERID
from
asset join assettype on asset.ASSETTYPEID = assettype.ID
join residentassetmapping on residentassetmapping.ASSETID = asset.id
join user on user.id = residentassetmapping.USERID 
join credentials on user.id = credentials.USERID
join flatdetail on flatdetail.ID = asset.FLATID
JOIN ASSETRELATIONTYPE ON ASSETRELATIONTYPE.ID = residentassetmapping.RELATIONTYPEID;

-- -----------------------------------------------------
-- View `rohinicomplex`.`PAYMENTSVIEW`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `rohinicomplex`.`PAYMENTSVIEW` ;
DROP TABLE IF EXISTS `rohinicomplex`.`PAYMENTSVIEW`;
USE `rohinicomplex`;
CREATE or REPLACE VIEW `PAYMENTSVIEW` AS
select 
bill.ID AS EBILLNO,
BILLNUMBER AS BILLNUMBER,
BILLDATE AS BILLDATE,
PAYMENT.DATE AS PAYMENTDATE,
PAYMENT.REFNO,
videtype.NAME as VIDE,
payment.AMOUNT AS AMOUNT,
credentials.USERNAME as USERNAME,
TR.FNAME as TREASURER
 from
bill  join payment on payment.id = bill.PAYMENTID
JOIN videtype on payment.videtypeid = videtype.ID
JOIN USER ON USER.ID = bill.BILLEDTO
JOIN credentials ON credentials.USERID=USER.ID 
JOIN USER tr ON USER.ID = BILL.GENERATEDBY

;

-- -----------------------------------------------------
-- View `rohinicomplex`.`PAYMENTDETAILVIEW`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `rohinicomplex`.`PAYMENTDETAILVIEW` ;
DROP TABLE IF EXISTS `rohinicomplex`.`PAYMENTDETAILVIEW`;
USE `rohinicomplex`;
CREATE OR REPLACE VIEW `PAYMENTDETAILVIEW` AS

select C.ID
from 
charge c join paymentitem pi on  pi.CHARGEID = c.id
join payment p on p.id = pi.PAYMENTID 
join bill b on b.paymentid = p.id
join writeoffitem wi on c.id = wi.CHARGEID
join writeoff w on w.id = b.writeoffid
join bill wb on wb.WRITEOFFID = w.id


;

-- -----------------------------------------------------
-- View `rohinicomplex`.`CHARGEVIEW`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `rohinicomplex`.`CHARGEVIEW` ;
DROP TABLE IF EXISTS `rohinicomplex`.`CHARGEVIEW`;
USE `rohinicomplex`;
CREATE OR REPLACE VIEW `CHARGEVIEW` AS

select 
c.id as SLNO,
c.EVENTDATE as INVDATE,
c.DueDate as DUEDATE,
c.AMOUNT as AMOUNT,
r.USERID as USERID,
ifnull(sum(pi.amount),0) as PAID,
ifnull(sum(wi.amount),0) as WF,
c.AMOUNT - ifnull(sum(pi.amount),0) - ifnull(sum(wi.amount),0)  as DUEAMOUNT
from
charge c join asset a on c.ASSETID = a.id
join residentassetmapping r on r.ASSETID = a.id
left join paymentitem pi on pi.chargeid = c.id
left join writeoffitem wi on wi.chargeid = c.id
group by c.id
order by DUEDATE ;

-- -----------------------------------------------------
-- View `rohinicomplex`.`GETMRMBERSVIEW`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `rohinicomplex`.`GETMRMBERSVIEW` ;
DROP TABLE IF EXISTS `rohinicomplex`.`GETMRMBERSVIEW`;
USE `rohinicomplex`;
CREATE OR REPLACE VIEW  `GETMRMBERSVIEW` AS
select  
user.id,
concat(concat (user.FName, ' ' ),user.Lname) as Name,
GROUP_CONCAT(distinct role.name) as Role,
Concat(
concat ("Flat : " ,GROUP_CONCAT( distinct flatdetail.DESCRIPTION) ) ,
concat("<br/>Garriage : ",GROUP_CONCAT(distinct garriagedetail.GARRIAGENUMBER) )) as Asset,
user.PHONE,
user.EMAIL

from USER user
 join CREDENTIALS c on c.userid = user.id
 join userxrole on userxrole.USER = user.id 
join role on userxrole.ROLE = role.id
join residentassetmapping res on res.USERID = user.id
join asset on asset.id = res.assetid
left join garriagedetail on garriagedetail.ID = asset.GARRIAGEID
left join flatdetail on flatdetail.ID = asset.FLATID
group by id;

-- -----------------------------------------------------
-- View `rohinicomplex`.`ALLASSTVIEW`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `rohinicomplex`.`ALLASSTVIEW` ;
DROP TABLE IF EXISTS `rohinicomplex`.`ALLASSTVIEW`;
USE `rohinicomplex`;
CREATE OR REPLACE VIEW `ALLASSTVIEW` AS
SELECT 
ID,
ASSETTYPE,
CASE WHEN FLAT IS NOT NULL
THEN FLAT
ELSE GARRIAGE
END AS ASSET
 
FROM
(
SELECT 
A.ID AS ID, 
T.CODE AS ASSETTYPE,
group_concat(distinct F.DESCRIPTION) AS FLAT,
group_concat(distinct G.GARRIAGENUMBER) AS GARRIAGE
FROM asset A
LEFT JOIN garriagedetail G ON G.ID = A.GARRIAGEID 
LEFT JOIN flatdetail F ON F.ID = A.FLATID
JOIN ASSETTYPE T ON A.ASSETTYPEID = T.ID
GROUP BY A.ID ) AS DATA ORDER BY ASSETTYPE,ID
;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
