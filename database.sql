USE rohinicomplex ;

-- -----------------------------------------------------
-- Table GARRIAGETYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS GARRIAGETYPE ;

CREATE TABLE IF NOT EXISTS GARRIAGETYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table BILLTYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS BILLTYPE ;

CREATE TABLE IF NOT EXISTS BILLTYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table ASSETTYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS ASSETTYPE ;

CREATE TABLE IF NOT EXISTS ASSETTYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table WRITEOFFREASONTYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS WRITEOFFREASONTYPE ;

CREATE TABLE IF NOT EXISTS WRITEOFFREASONTYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table USERDOCUMENTTYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS USERDOCUMENTTYPE ;

CREATE TABLE IF NOT EXISTS USERDOCUMENTTYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table VIDETYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS VIDETYPE ;

CREATE TABLE IF NOT EXISTS VIDETYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table TRANSACTIONTYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS TRANSACTIONTYPE ;

CREATE TABLE IF NOT EXISTS TRANSACTIONTYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table CATEGORYTYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS CATEGORYTYPE ;

CREATE TABLE IF NOT EXISTS CATEGORYTYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table PERCENTAGETYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS PERCENTAGETYPE ;

CREATE TABLE IF NOT EXISTS PERCENTAGETYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table ROLE
-- -----------------------------------------------------
DROP TABLE IF EXISTS ROLE ;

CREATE TABLE IF NOT EXISTS ROLE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DISPLAY_NAME VARCHAR(50) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  CONTRL TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID),
  UNIQUE INDEX NAME_UNIQUE (NAME ASC));


-- -----------------------------------------------------
-- Table PERMISSION
-- -----------------------------------------------------
DROP TABLE IF EXISTS PERMISSION ;

CREATE TABLE IF NOT EXISTS PERMISSION (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DISPLAY_NAME VARCHAR(50) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID),
  UNIQUE INDEX NAME_UNIQUE (NAME ASC));


-- -----------------------------------------------------
-- Table ROLEXPERMISSION
-- -----------------------------------------------------
DROP TABLE IF EXISTS ROLEXPERMISSION ;

CREATE TABLE IF NOT EXISTS ROLEXPERMISSION (
  ID INT NOT NULL AUTO_INCREMENT,
  ROLE INT NULL,
  PERMISSION INT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT RXPROLE
    FOREIGN KEY (ROLE)
    REFERENCES ROLE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT RXPPERMISSION
    FOREIGN KEY (PERMISSION)
    REFERENCES PERMISSION (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table USER
-- -----------------------------------------------------
DROP TABLE IF EXISTS USER ;

CREATE TABLE IF NOT EXISTS USER (
  ID INT NOT NULL,
  FNAME VARCHAR(20) NOT NULL,
  MNAME VARCHAR(20) NULL,
  LNAME VARCHAR(20) NOT NULL,
  SEX CHAR(1) NOT NULL,
  DOB DATE NULL,
  ADDRESS VARCHAR(200) NULL,
  PIN CHAR(6) NULL,
  MOBILENUMBER CHAR(10) NULL,
  PHONE VARCHAR(15) NULL,
  EMAIL VARCHAR(45) NULL,
  RETIRED TINYINT(1) NOT NULL,
  IMAGE BLOB NULL,
  VERIFIED TINYINT(1) NOT NULL,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table CREDENTIALS
-- -----------------------------------------------------
DROP TABLE IF EXISTS CREDENTIALS ;

CREATE TABLE IF NOT EXISTS CREDENTIALS (
  ID INT NOT NULL,
  USERNAME VARCHAR(45) NOT NULL,
  PASSWORD VARCHAR(100) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  RETRYCOUNT INT NOT NULL,
  LOCKED TINYINT(1) NOT NULL DEFAULT 0,
  USERID INT NOT NULL,
  USERIDMODI TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID),
  INDEX USERID_idx (USERID ASC),
  CONSTRAINT CREDUSERID
    FOREIGN KEY (USERID)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table USERXROLE
-- -----------------------------------------------------
DROP TABLE IF EXISTS USERXROLE ;

CREATE TABLE IF NOT EXISTS USERXROLE (
  ID INT NOT NULL AUTO_INCREMENT,
  ROLE INT NULL,
  USER INT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT UXRROLE
    FOREIGN KEY (ROLE)
    REFERENCES ROLE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT UXRUSER
    FOREIGN KEY (USER)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table USERVERIDOC
-- -----------------------------------------------------
DROP TABLE IF EXISTS USERVERIDOC ;

CREATE TABLE IF NOT EXISTS USERVERIDOC (
  ID INT NOT NULL AUTO_INCREMENT,
  USERID INT NOT NULL,
  USERDOCUMENTTYPE INT NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  DCOUMENT BLOB NULL,
  UPLOADED TINYINT(1) NOT NULL DEFAULT 0,
  VERIFIED TINYINT(1) NOT NULL DEFAULT 0,
  UPLOADEDBY INT NULL,
  UPLOADTIME DATETIME NULL,
  VERFIEDBY INT NULL,
  VERIFIEDON DATETIME NULL,
  PRIMARY KEY (ID),
  INDEX USERID_idx (USERID ASC),
  INDEX VERIFIEDBY_idx (VERFIEDBY ASC),
  INDEX UPLOADEDBY_idx (UPLOADEDBY ASC),
  INDEX DOCUMENTTYPE_idx (USERDOCUMENTTYPE ASC),
  CONSTRAINT DOCUSERID
    FOREIGN KEY (USERID)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT DOCUPLOADEDBY
    FOREIGN KEY (UPLOADEDBY)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT DOCVERIFIEDBY
    FOREIGN KEY (VERFIEDBY)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT DOCUMENTTYPEID
    FOREIGN KEY (USERDOCUMENTTYPE)
    REFERENCES USERDOCUMENTTYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table FLATDETAIL
-- -----------------------------------------------------
DROP TABLE IF EXISTS FLATDETAIL ;

CREATE TABLE IF NOT EXISTS FLATDETAIL (
  ID INT NOT NULL AUTO_INCREMENT,
  BLOCK CHAR(1) NOT NULL,
  FLATNUMBER CHAR(3) NOT NULL,
  SQFT INT NOT NULL,
  FLOOR CHAR(1) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table GARRIAGEDETAIL
-- -----------------------------------------------------
DROP TABLE IF EXISTS GARRIAGEDETAIL ;

CREATE TABLE IF NOT EXISTS GARRIAGEDETAIL (
  ID INT NOT NULL AUTO_INCREMENT,
  GARRIAGENUMBER VARCHAR(5) NOT NULL,
  GARRIAGETYPEID INT NULL,
  SQFT INT NULL,
  PRIMARY KEY (ID),
  INDEX GARRIAGETYPEID_idx (GARRIAGETYPEID ASC),
  CONSTRAINT FK_GARRIAGETYPEID
    FOREIGN KEY (GARRIAGETYPEID)
    REFERENCES GARRIAGETYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table ASSET
-- -----------------------------------------------------
DROP TABLE IF EXISTS ASSET ;

CREATE TABLE IF NOT EXISTS ASSET (
  ID INT NOT NULL AUTO_INCREMENT,
  GARRIAGEID INT NULL,
  FLATID INT NULL,
  ASSETTYPEID INT NOT NULL,
  PRIMARY KEY (ID),
  INDEX GARRIAGEID_idx (GARRIAGEID ASC),
  INDEX FLATID_idx (FLATID ASC),
  INDEX ASSETTYPEID_idx (ASSETTYPEID ASC),
  CONSTRAINT ASSTGARRIAGEID
    FOREIGN KEY (GARRIAGEID)
    REFERENCES GARRIAGEDETAIL (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT ASSTFLATID
    FOREIGN KEY (FLATID)
    REFERENCES FLATDETAIL (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT ASSTASSETTYPEID
    FOREIGN KEY (ASSETTYPEID)
    REFERENCES ASSETTYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table ASSETRELATIONTYPE
-- -----------------------------------------------------
DROP TABLE IF EXISTS ASSETRELATIONTYPE ;

CREATE TABLE IF NOT EXISTS ASSETRELATIONTYPE (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(200) NULL,
  CODE VARCHAR(20) NOT NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table RESIDENTASSETMAPPING
-- -----------------------------------------------------
DROP TABLE IF EXISTS RESIDENTASSETMAPPING ;

CREATE TABLE IF NOT EXISTS RESIDENTASSETMAPPING (
  ID INT NOT NULL AUTO_INCREMENT,
  USERID INT NOT NULL,
  ASSETID INT NULL,
  STARTDATE DATE NOT NULL,
  ENDDATE DATE NULL,
  RELATIONTYPEID INT NULL,
  PRIMARY KEY (ID),
  INDEX USERID_idx (USERID ASC),
  INDEX ASSETID_idx (ASSETID ASC),
  INDEX RESRELTYPE_idx (RELATIONTYPEID ASC),
  CONSTRAINT RESUSERID
    FOREIGN KEY (USERID)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT RESASSETID
    FOREIGN KEY (ASSETID)
    REFERENCES ASSET (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT RESRELTYPE
    FOREIGN KEY (RELATIONTYPEID)
    REFERENCES ASSETRELATIONTYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table FACILITYDETAIL
-- -----------------------------------------------------
DROP TABLE IF EXISTS FACILITYDETAIL ;

CREATE TABLE IF NOT EXISTS FACILITYDETAIL (
  ID INT NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(5) NOT NULL,
  DESCRIPTION VARCHAR(200) NOT NULL,
  BILLTYPEID INT NOT NULL,
  BILLFREQUENCY INT NULL,
  PRIMARY KEY (ID),
  INDEX BILLTYPEID_idx (BILLTYPEID ASC),
  CONSTRAINT FACILITYBILLTYPEID
    FOREIGN KEY (BILLTYPEID)
    REFERENCES BILLTYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table FACILITYMAPPING
-- -----------------------------------------------------
DROP TABLE IF EXISTS FACILITYMAPPING ;

CREATE TABLE IF NOT EXISTS FACILITYMAPPING (
  ID INT NOT NULL AUTO_INCREMENT,
  USERID INT NOT NULL,
  FACILITYID INT NOT NULL,
  STARTDATE DATE NOT NULL,
  ENDDATE DATE NULL,
  PRIMARY KEY (ID),
  UNIQUE INDEX STARTDATE_UNIQUE (STARTDATE ASC),
  INDEX FACILITYID_idx (FACILITYID ASC),
  INDEX USERID_idx (USERID ASC),
  CONSTRAINT FMAPFACILITYID
    FOREIGN KEY (FACILITYID)
    REFERENCES FACILITYDETAIL (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT FMAPUSERID
    FOREIGN KEY (USERID)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table PAYMENT
-- -----------------------------------------------------
DROP TABLE IF EXISTS PAYMENT ;

CREATE TABLE IF NOT EXISTS PAYMENT (
  ID INT NOT NULL AUTO_INCREMENT,
  DATE DATE NOT NULL,
  VIDETYPEID INT NOT NULL,
  AMOUNT DECIMAL NOT NULL,
  USERID INT NOT NULL,
  RECEIVEDBY INT NOT NULL,
  REVERSED TINYINT(1) NOT NULL DEFAULT 0,
  REFNO VARCHAR(20) NULL,
  PRIMARY KEY (ID),
  INDEX VIDETYPEID_idx (VIDETYPEID ASC),
  INDEX USERID_idx (USERID ASC),
  INDEX RECEIVEDBY_idx (RECEIVEDBY ASC),
  CONSTRAINT PAYVIDETYPEID
    FOREIGN KEY (VIDETYPEID)
    REFERENCES VIDETYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT PAYUSERID
    FOREIGN KEY (USERID)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT PAYRECEIVEDBY
    FOREIGN KEY (RECEIVEDBY)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table EXPENDATURE
-- -----------------------------------------------------
DROP TABLE IF EXISTS EXPENDATURE ;

CREATE TABLE IF NOT EXISTS EXPENDATURE (
  ID INT NOT NULL AUTO_INCREMENT,
  DATE DATE NOT NULL,
  VIDETYPEID INT NOT NULL,
  CATEGORYTYPEID INT NOT NULL,
  AMOUNT DECIMAL NOT NULL,
  REFERENCE VARCHAR(5) NULL,
  PAYTO VARCHAR(200) NOT NULL,
  PAIDBY INT NOT NULL,
  PRIMARY KEY (ID),
  INDEX VIDETYPEID_idx (VIDETYPEID ASC),
  INDEX CATEGORYTYPEID_idx (CATEGORYTYPEID ASC),
  INDEX PAIDBY_idx (PAIDBY ASC),
  CONSTRAINT EXVIDETYPEID
    FOREIGN KEY (VIDETYPEID)
    REFERENCES VIDETYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT EXCATEGORYTYPEID
    FOREIGN KEY (CATEGORYTYPEID)
    REFERENCES CATEGORYTYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT EXPAIDBY
    FOREIGN KEY (PAIDBY)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table CHARGEPATTERNDETAIL
-- -----------------------------------------------------
DROP TABLE IF EXISTS CHARGEPATTERNDETAIL ;

CREATE TABLE IF NOT EXISTS CHARGEPATTERNDETAIL (
  ID INT NOT NULL,
  STARTDATE DATE NOT NULL,
  ENDDATE DATE NULL,
  PERCENTAGE DECIMAL NULL,
  FIXEDAMOUNT DECIMAL NULL,
  RETIRED TINYINT(1) NOT NULL DEFAULT 0,
  PERCENTAGEOF INT NULL,
  PRIMARY KEY (ID));


-- -----------------------------------------------------
-- Table CHARGEPATTERN
-- -----------------------------------------------------
DROP TABLE IF EXISTS CHARGEPATTERN ;

CREATE TABLE IF NOT EXISTS CHARGEPATTERN (
  ID INT NOT NULL,
  NAME VARCHAR(50) NOT NULL,
  DESCRIPTION VARCHAR(50) NULL,
  PATTERNDETAIL INT NOT NULL,
  PERIODICITY INT NOT NULL,
  CATEGORYTYPEID INT NOT NULL,
  PRIMARY KEY (ID),
  INDEX CATEGORYTYPEID_idx (CATEGORYTYPEID ASC),
  INDEX CHARGEPATTERNDETAIL_idx (PATTERNDETAIL ASC),
  CONSTRAINT CPCATEGORYTYPEID
    FOREIGN KEY (CATEGORYTYPEID)
    REFERENCES CATEGORYTYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT CPCHARGEPATTERNDETAIL
    FOREIGN KEY (PATTERNDETAIL)
    REFERENCES CHARGEPATTERNDETAIL (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table CHARGE
-- -----------------------------------------------------
DROP TABLE IF EXISTS CHARGE ;

CREATE TABLE IF NOT EXISTS CHARGE (
  ID INT NOT NULL AUTO_INCREMENT,
  HOLD TINYINT(1) NOT NULL DEFAULT 0,
  AMOUNT DECIMAL NULL,
  ASSETID INT NULL,
  REVERSED TINYINT(1) NOT NULL DEFAULT 0,
  EVENTDATE DATE NOT NULL,
  DUEDATE DATE NOT NULL,
  CREATEDBY INT NOT NULL,
  FACILITYID INT NULL,
  CHARGEPATTERN INT NOT NULL,
  HOLDREASON VARCHAR(50) NULL,
  PRIMARY KEY (ID),
  INDEX CHARGEPATTERN_idx (CHARGEPATTERN ASC),
  INDEX CREATEDBY_idx (CREATEDBY ASC),
  INDEX ASSETID_idx (ASSETID ASC),
  INDEX FACILITYID_idx (FACILITYID ASC),
  CONSTRAINT CGCHARGEPATTERN
    FOREIGN KEY (CHARGEPATTERN)
    REFERENCES CHARGEPATTERN (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT CGCREATEDBY
    FOREIGN KEY (CREATEDBY)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT CGASSETID
    FOREIGN KEY (ASSETID)
    REFERENCES ASSET (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT CGFACILITYID
    FOREIGN KEY (FACILITYID)
    REFERENCES FACILITYDETAIL (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table PAYMENTITEM
-- -----------------------------------------------------
DROP TABLE IF EXISTS PAYMENTITEM ;

CREATE TABLE IF NOT EXISTS PAYMENTITEM (
  ID INT NOT NULL AUTO_INCREMENT,
  PAYMENTID INT NOT NULL,
  AMOUNT DECIMAL NOT NULL,
  CHARGEID INT NOT NULL,
  REVERSED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID),
  INDEX PAYMENTID_idx (PAYMENTID ASC),
  INDEX CHARGEID_idx (CHARGEID ASC),
  CONSTRAINT PIPAYMENTID
    FOREIGN KEY (PAYMENTID)
    REFERENCES PAYMENT (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT PICHARGEID
    FOREIGN KEY (CHARGEID)
    REFERENCES CHARGE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table WRITEOFF
-- -----------------------------------------------------
DROP TABLE IF EXISTS WRITEOFF ;

CREATE TABLE IF NOT EXISTS WRITEOFF (
  ID INT NOT NULL AUTO_INCREMENT,
  DATE DATE NOT NULL,
  AMOUNT DECIMAL NOT NULL,
  USERID INT NOT NULL,
  RECEIVEDBY INT NOT NULL,
  REVERSED TINYINT(1) NOT NULL DEFAULT 0,
  REASON INT NULL,
  PRIMARY KEY (ID),
  INDEX USERID_idx (USERID ASC),
  INDEX RECEIVEDBY_idx (RECEIVEDBY ASC),
  INDEX REASON_idx (REASON ASC),
  CONSTRAINT WOUSERID
    FOREIGN KEY (USERID)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT WORECEIVEDBY
    FOREIGN KEY (RECEIVEDBY)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT WOREASON
    FOREIGN KEY (REASON)
    REFERENCES WRITEOFFREASONTYPE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table WRITEOFFITEM
-- -----------------------------------------------------
DROP TABLE IF EXISTS WRITEOFFITEM ;

CREATE TABLE IF NOT EXISTS WRITEOFFITEM (
  ID INT NOT NULL AUTO_INCREMENT,
  WRITEOFFID INT NOT NULL,
  AMOUNT DECIMAL NOT NULL,
  CHARGEID INT NOT NULL,
  REVERSED TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (ID),
  INDEX WRITEOFFID_idx (WRITEOFFID ASC),
  INDEX CHARGEID_idx (CHARGEID ASC),
  CONSTRAINT WIWRITEOFFID
    FOREIGN KEY (WRITEOFFID)
    REFERENCES WRITEOFF (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT WICHARGEID
    FOREIGN KEY (CHARGEID)
    REFERENCES CHARGE (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table BILL
-- -----------------------------------------------------
DROP TABLE IF EXISTS BILL ;

CREATE TABLE IF NOT EXISTS BILL (
  ID INT NOT NULL AUTO_INCREMENT,
  PAYMENTID INT NULL,
  BILLEDTO INT NOT NULL,
  BILLDATE DATE NOT NULL,
  WRITEOFFID INT NULL,
  BILLNUMBER VARCHAR(5) NOT NULL,
  GENERATEDBY INT NOT NULL,
  PRIMARY KEY (ID),
  INDEX PAYMENTID_idx (PAYMENTID ASC),
  INDEX WRITEOFFID_idx (WRITEOFFID ASC),
  INDEX GENERATEDBY_idx (GENERATEDBY ASC),
  INDEX BILLEDTO_idx (BILLEDTO ASC),
  CONSTRAINT BILLPAYMENTID
    FOREIGN KEY (PAYMENTID)
    REFERENCES PAYMENT (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT BILLWRITEOFFID
    FOREIGN KEY (WRITEOFFID)
    REFERENCES WRITEOFF (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT BILLGENERATEDBY
    FOREIGN KEY (GENERATEDBY)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT BILLBILLEDTO
    FOREIGN KEY (BILLEDTO)
    REFERENCES USER (ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

USE rohinicomplex ;

-- -----------------------------------------------------
-- Placeholder table for view PROFILEVIEW
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS PROFILEVIEW (USERNAME INT, FNAME INT, MNAME INT, LNAME INT, sex INT, DOB INT, ADDRESS INT, PIN INT, EMAIL INT, MOBILENUMBER INT, PHONE INT, LOCKED INT, USERIDMODI INT, IMAGE INT, VERIFIED INT, USERID INT, ROLES INT, ROLEIDS INT);

-- -----------------------------------------------------
-- Placeholder table for view PERMISSIONXUSERVIEW
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS PERMISSIONXUSERVIEW (PERMISSIONS INT, USERNAME INT);

-- -----------------------------------------------------
-- Placeholder table for view ASSETVIEW
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS ASSETVIEW (ASSETTYPE INT, STARTDATE INT, ENDDATE INT, USERNAME INT, ASSETNAME INT, ID INT, RELATIONCODE INT, RELATIONID INT, USERID INT);

-- -----------------------------------------------------
-- Placeholder table for view PAYMENTSVIEW
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS PAYMENTSVIEW (EBILLNO INT, BILLNUMBER INT, BILLDATE INT, PAYMENTDATE INT, REFNO INT, VIDE INT, AMOUNT INT, USERNAME INT, TREASURER INT);

-- -----------------------------------------------------
-- Placeholder table for view PAYMENTDETAILVIEW
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS PAYMENTDETAILVIEW (ID INT);

-- -----------------------------------------------------
-- Placeholder table for view CHARGEVIEW
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS CHARGEVIEW (SLNO INT, INVDATE INT, DUEDATE INT, AMOUNT INT, USERID INT, PAID INT, WF INT, DUEAMOUNT INT);

-- -----------------------------------------------------
-- Placeholder table for view GETMRMBERSVIEW
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS GETMRMBERSVIEW (id INT, Name INT, Role INT, Asset INT, PHONE INT, EMAIL INT);

-- -----------------------------------------------------
-- Placeholder table for view ALLASSTVIEW
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS ALLASSTVIEW (ID INT, ASSETTYPE INT, ASSET INT);


-- -----------------------------------------------------
-- View PROFILEVIEW
-- -----------------------------------------------------
DROP VIEW IF EXISTS PROFILEVIEW ;
DROP TABLE IF EXISTS PROFILEVIEW;
USE rohinicomplex;
CREATE OR replace VIEW PROFILEVIEW AS
select 
USERNAME,
FNAME,
MNAME,
LNAME,
sex,
DOB,
ADDRESS,
PIN,
EMAIL,
MOBILENUMBER,
PHONE,
LOCKED,
USERIDMODI,
IMAGE,
VERIFIED,
user.id as USERID,
GROUP_CONCAT(role.name SEPARATOR ',' ) as ROLES,
GROUP_CONCAT(role.id SEPARATOR ',') as ROLEIDS

 from user join credentials on user.id = credentials.USERID
 join userxrole on userxrole.USER = user.id join role on userxrole.ROLE = role.id
where user.RETIRED=0 and credentials.RETIRED=0;

-- -----------------------------------------------------
-- View PERMISSIONXUSERVIEW
-- -----------------------------------------------------
DROP VIEW IF EXISTS PERMISSIONXUSERVIEW ;
DROP TABLE IF EXISTS PERMISSIONXUSERVIEW;
USE rohinicomplex;
CREATE OR REPLACE VIEW PERMISSIONXUSERVIEW AS
SELECT permission.NAME AS PERMISSIONS,
credentials.username AS USERNAME

FROM 
user JOIN userxrole ON USER.ID = userxrole.USER 
JOIN credentials ON credentials.USERID = user.id
JOIN role ON role.ID = userxrole.ROLE
JOIN rolexpermission ON ROLE.ID = rolexpermission.ROLE
JOIN permission ON rolexpermission.permission = permission.ID
;

-- -----------------------------------------------------
-- View ASSETVIEW
-- -----------------------------------------------------
DROP VIEW IF EXISTS ASSETVIEW ;
DROP TABLE IF EXISTS ASSETVIEW;
USE rohinicomplex;
CREATE OR REPLACE VIEW ASSETVIEW AS

select 
assettype.NAME as ASSETTYPE,
residentassetmapping.STARTDATE AS STARTDATE,
residentassetmapping.ENDDATE AS ENDDATE,
credentials.USERNAME as USERNAME,
garriagedetail.GARRIAGENUMBER as ASSETNAME,
asset.id as ID,
ASSETRELATIONTYPE.CODE AS RELATIONCODE,
ASSETRELATIONTYPE.id AS RELATIONID,

user.id as USERID
from
asset join assettype on asset.ASSETTYPEID = assettype.ID
join residentassetmapping on residentassetmapping.ASSETID = asset.id
join user on user.id = residentassetmapping.USERID 
join credentials on user.id = credentials.USERID
join garriagedetail on garriagedetail.ID = asset.GARRIAGEID
JOIN ASSETRELATIONTYPE ON ASSETRELATIONTYPE.ID = residentassetmapping.RELATIONTYPEID
union 

select 
assettype.NAME as ASSETTYPE,
residentassetmapping.STARTDATE AS STARTDATE,
residentassetmapping.ENDDATE AS ENDDATE,
credentials.USERNAME as USERNAME,
flatdetail.DESCRIPTION as ASSETNAME,
asset.id as ID,
ASSETRELATIONTYPE.CODE AS RELATIONCODE,
ASSETRELATIONTYPE.id AS RELATIONID,
user.id as USERID
from
asset join assettype on asset.ASSETTYPEID = assettype.ID
join residentassetmapping on residentassetmapping.ASSETID = asset.id
join user on user.id = residentassetmapping.USERID 
join credentials on user.id = credentials.USERID
join flatdetail on flatdetail.ID = asset.FLATID
JOIN ASSETRELATIONTYPE ON ASSETRELATIONTYPE.ID = residentassetmapping.RELATIONTYPEID;

-- -----------------------------------------------------
-- View PAYMENTSVIEW
-- -----------------------------------------------------
DROP VIEW IF EXISTS PAYMENTSVIEW ;
DROP TABLE IF EXISTS PAYMENTSVIEW;
USE rohinicomplex;
CREATE or REPLACE VIEW PAYMENTSVIEW AS
select 
bill.ID AS EBILLNO,
BILLNUMBER AS BILLNUMBER,
BILLDATE AS BILLDATE,
PAYMENT.DATE AS PAYMENTDATE,
PAYMENT.REFNO,
videtype.NAME as VIDE,
payment.AMOUNT AS AMOUNT,
credentials.USERNAME as USERNAME,
TR.FNAME as TREASURER
 from
bill  join payment on payment.id = bill.PAYMENTID
JOIN videtype on payment.videtypeid = videtype.ID
JOIN USER ON USER.ID = bill.BILLEDTO
JOIN credentials ON credentials.USERID=USER.ID 
JOIN USER tr ON USER.ID = BILL.GENERATEDBY

;

-- -----------------------------------------------------
-- View PAYMENTDETAILVIEW
-- -----------------------------------------------------
DROP VIEW IF EXISTS PAYMENTDETAILVIEW ;
DROP TABLE IF EXISTS PAYMENTDETAILVIEW;
USE rohinicomplex;
CREATE OR REPLACE VIEW PAYMENTDETAILVIEW AS

select C.ID
from 
charge c join paymentitem pi on  pi.CHARGEID = c.id
join payment p on p.id = pi.PAYMENTID 
join bill b on b.paymentid = p.id
join writeoffitem wi on c.id = wi.CHARGEID
join writeoff w on w.id = b.writeoffid
join bill wb on wb.WRITEOFFID = w.id


;

-- -----------------------------------------------------
-- View CHARGEVIEW
-- -----------------------------------------------------
DROP VIEW IF EXISTS CHARGEVIEW ;
DROP TABLE IF EXISTS CHARGEVIEW;
USE rohinicomplex;
CREATE OR REPLACE VIEW CHARGEVIEW AS

select 
c.id as SLNO,
c.EVENTDATE as INVDATE,
c.DueDate as DUEDATE,
c.AMOUNT as AMOUNT,
r.USERID as USERID,
ifnull(sum(pi.amount),0) as PAID,
ifnull(sum(wi.amount),0) as WF,
c.AMOUNT - ifnull(sum(pi.amount),0) - ifnull(sum(wi.amount),0)  as DUEAMOUNT
from
charge c join asset a on c.ASSETID = a.id
join residentassetmapping r on r.ASSETID = a.id
left join paymentitem pi on pi.chargeid = c.id
left join writeoffitem wi on wi.chargeid = c.id
group by c.id
order by DUEDATE ;

-- -----------------------------------------------------
-- View GETMRMBERSVIEW
-- -----------------------------------------------------
DROP VIEW IF EXISTS GETMRMBERSVIEW ;
DROP TABLE IF EXISTS GETMRMBERSVIEW;
USE rohinicomplex;
CREATE OR REPLACE VIEW  GETMRMBERSVIEW AS
select  
user.id,
concat(concat (user.FName,   ),user.Lname) as Name,
GROUP_CONCAT(distinct role.name) as Role,
Concat(
concat ("Flat : " ,GROUP_CONCAT( distinct flatdetail.DESCRIPTION) ) ,
concat("<br/>Garriage : ",GROUP_CONCAT(distinct garriagedetail.GARRIAGENUMBER) )) as Asset,
user.PHONE,
user.EMAIL

from USER user
 join CREDENTIALS c on c.userid = user.id
 join userxrole on userxrole.USER = user.id 
join role on userxrole.ROLE = role.id
join residentassetmapping res on res.USERID = user.id
join asset on asset.id = res.assetid
left join garriagedetail on garriagedetail.ID = asset.GARRIAGEID
left join flatdetail on flatdetail.ID = asset.FLATID
group by id;

-- -----------------------------------------------------
-- View ALLASSTVIEW
-- -----------------------------------------------------
DROP VIEW IF EXISTS ALLASSTVIEW ;
DROP TABLE IF EXISTS ALLASSTVIEW;
USE rohinicomplex;
CREATE OR REPLACE VIEW ALLASSTVIEW AS
SELECT 
ID,
ASSETTYPE,
CASE WHEN FLAT IS NOT NULL
THEN FLAT
ELSE GARRIAGE
END AS ASSET
 
FROM
(
SELECT 
A.ID AS ID, 
T.CODE AS ASSETTYPE,
group_concat(distinct F.DESCRIPTION) AS FLAT,
group_concat(distinct G.GARRIAGENUMBER) AS GARRIAGE
FROM asset A
LEFT JOIN garriagedetail G ON G.ID = A.GARRIAGEID 
LEFT JOIN flatdetail F ON F.ID = A.FLATID
JOIN ASSETTYPE T ON A.ASSETTYPEID = T.ID
GROUP BY A.ID ) AS DATA ORDER BY ASSETTYPE,ID
;


